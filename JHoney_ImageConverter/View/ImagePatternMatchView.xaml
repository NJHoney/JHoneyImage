<UserControl x:Class="JHoney_ImageConverter.View.ImagePatternMatchView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:JHoney_ImageConverter.View"
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:vc="clr-namespace:JHoney_ImageConverter.Converter"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             Visibility="{Binding Visibility}"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />

        </Grid.RowDefinitions>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="KeyDown">
                <i:InvokeCommandAction Command="{Binding ImageConvertViewModelKeyEvent.EventKeyDown}" PassEventArgsToCommand="True" />
            </i:EventTrigger>
            <i:EventTrigger EventName="KeyUp">
                <i:InvokeCommandAction Command="{Binding ImageConvertViewModelKeyEvent.EventKeyUp}" PassEventArgsToCommand="True" />
            </i:EventTrigger>
            <i:EventTrigger EventName="KeyUp">
                <i:InvokeCommandAction Command="{Binding }" PassEventArgsToCommand="True" />
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <!--이미지정보-->
        <Grid Grid.Column="0" Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Margin="5" HorizontalAlignment="Center">
                <StackPanel  Orientation="Horizontal" Margin="5">
                    <DataGrid x:Name="DataGrid" ItemsSource="{Binding ImageInfoDataGridList}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <i:Interaction.Triggers>
                            <!--<i:EventTrigger EventName="Loaded">
                                <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=DataGrid, Mode=OneWay}" />
                            </i:EventTrigger>-->
                        </i:Interaction.Triggers>
                    </DataGrid>
                </StackPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Margin="5" HorizontalAlignment="Center" Visibility="{Binding IsSelectRectangle, Converter={vc:BoolenToVisibilityConverter}}">
                <StackPanel  Orientation="Horizontal" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock Text="ROI X : " VerticalAlignment="Center" Margin="5" />
                    <TextBox Width="35" Height="15" Text="{Binding StartRectPointX}" VerticalAlignment="Center" Margin="5" />
                    <TextBlock Text="ROI Y : " VerticalAlignment="Center" Margin="5" />
                    <TextBox Width="35" Text="{Binding StartRectPointY}" VerticalAlignment="Center" Margin="5" />
                    <TextBlock Text="Width : " VerticalAlignment="Center" Margin="5" />
                    <TextBox Width="35" Text="{Binding RectWidth}" VerticalAlignment="Center" Margin="5" />
                    <TextBlock Text="Height : " VerticalAlignment="Center" Margin="5" />
                    <TextBox Width="35" Text="{Binding RectHeight}" VerticalAlignment="Center" Margin="5" />
                </StackPanel>
            </GroupBox>
        </Grid>
        <!--캔버스-->
        <Grid Grid.Column="0" Grid.Row="2">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="2*" />
            </Grid.RowDefinitions>

            <GroupBox x:Name="Pattern" Grid.Column="0" Grid.Row="0" Header="Pattern Set" Margin="5" Background="{Binding PatternColor}"  >
                <i:Interaction.Triggers>
                    <!--<i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding Path=SelectPannelCommand}" CommandParameter="Pattern"/>
                    </i:EventTrigger>-->
                </i:Interaction.Triggers>
                <Grid Margin="5" VerticalAlignment="Center">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <Canvas x:Name="PatternCanvas" Background="{Binding PatternImageShow.ImageBrush}" Width="{Binding Background.ImageSource.Width, ElementName=PatternCanvas, Mode=OneWay}" Height="{Binding Background.ImageSource.Height, ElementName=PatternCanvas, Mode=OneWay}" AllowDrop="True" >
                            <Canvas.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="{Binding PatternImageShow.ImageBrushScaleX}" ScaleY="{Binding PatternImageShow.ImageBrushScaleY}"></ScaleTransform>
                                </TransformGroup>
                            </Canvas.LayoutTransform>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=PatternCanvas, Mode=OneWay}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseMove">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseMove}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Drop">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandDropFile}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <!--<i:EventTrigger EventName="MouseWheel">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseWheel}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>-->
                            </i:Interaction.Triggers>
                        </Canvas>
                    </ScrollViewer>
                </Grid>
            </GroupBox>

            <GroupBox x:Name="Target" Grid.Column="0" Grid.Row="1" Header="Target Set" Margin="5" Background="{Binding TargetColor}">
                <i:Interaction.Triggers>
                    <!--<i:EventTrigger EventName="MouseDown">
                        <i:InvokeCommandAction Command="{Binding Path=SelectPannelCommand}" CommandParameter="Target"/>
                    </i:EventTrigger>-->
                </i:Interaction.Triggers>
                <Grid VerticalAlignment="Center">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <Canvas x:Name="TargetCanvas" Background="{Binding TargetImageShow.ImageBrush}" Width="{Binding Background.ImageSource.Width, ElementName=TargetCanvas, Mode=OneWay}" Height="{Binding Background.ImageSource.Height, ElementName=TargetCanvas, Mode=OneWay}" AllowDrop="True">
                            <Canvas.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="{Binding TargetImageShow.ImageBrushScaleX}" ScaleY="{Binding TargetImageShow.ImageBrushScaleY}"></ScaleTransform>
                                </TransformGroup>
                            </Canvas.LayoutTransform>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=TargetCanvas, Mode=OneWay}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseUp">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseUp}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseMove">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseMove}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Drop">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandDropFile}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <!--<i:EventTrigger EventName="MouseWheel">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseWheel}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>-->
                            </i:Interaction.Triggers>
                            <Rectangle Stroke="Red" RenderTransformOrigin="0.5,0.5" StrokeThickness="5" Width="{Binding RectWidth}" Height="{Binding RectHeight}" Visibility="{Binding IsSelectRectangle, Converter={vc:BoolenToVisibilityConverter}}" >
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform X="{Binding StartRectPointX}" Y="{Binding StartRectPointY}"/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Canvas>
                    </ScrollViewer>

                </Grid>
            </GroupBox>

            <!--결과캔버스-->
            <GroupBox x:Name="Result" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Header="Result" Margin="5" Background="Blue" >
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="auto" />
                    </Grid.RowDefinitions>

                    <ScrollViewer Grid.Column="0" Grid.Row="0" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <Canvas x:Name="ResultCanvas" Background="{Binding ResultImageShow.ImageBrush}" Width="{Binding Background.ImageSource.Width, ElementName=ResultCanvas, Mode=OneWay}" Height="{Binding Background.ImageSource.Height, ElementName=ResultCanvas, Mode=OneWay}" AllowDrop="True">
                            <Canvas.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="{Binding ResultImageShow.ImageBrushScaleX}" ScaleY="{Binding ResultImageShow.ImageBrushScaleY}"></ScaleTransform>
                                </TransformGroup>
                            </Canvas.LayoutTransform>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=ResultCanvas, Mode=OneWay}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseMove">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseMove}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseWheel">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseWheel}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <!--<i:EventTrigger EventName="MouseDown">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseDown}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>-->
                            </i:Interaction.Triggers>
                            <Canvas.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Command="{Binding CanvasContext}" CommandParameter="Normal" Header="Normal" IsChecked="{Binding IsSelectNormal}" />
                                    <MenuItem Command="{Binding CanvasContext}" CommandParameter="ToList" Header="ToList" />
                                    <MenuItem Command="{Binding CanvasContext}" CommandParameter="Save" Header="Save" />
                                </ContextMenu>
                            </Canvas.ContextMenu>
                        </Canvas>
                    </ScrollViewer>

                    <DataGrid x:Name="DataGrid1" Grid.Column="1" Grid.Row="0" IsReadOnly="True" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName = "Loaded" >
                                <i:InvokeCommandAction Command = "{Binding CommandLoaded}" CommandParameter="{Binding ElementName=DataGrid1}" />
                            </i:EventTrigger>
                            <!--<i:EventTrigger EventName="SelectedCellsChanged">
                                <i:InvokeCommandAction Command="{Binding Path=CommandSelectDataGridResult}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>-->
                        </i:Interaction.Triggers>
                    </DataGrid>

                    <Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Content="Match" Command="{Binding CommandMatch}" />
                </Grid>
            </GroupBox>
        </Grid>


        <!--옵션탭-->
        <GroupBox Grid.Column="0" Grid.Row="1" Margin="5">
            <Grid>

            </Grid>
        </GroupBox>

    </Grid>
</UserControl>
