<UserControl x:Class="JHoney_ImageConverter.View.SegmentationLabelView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:JHoney_ImageConverter.View"
             xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:vc="clr-namespace:JHoney_ImageConverter.Converter"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:customControl="clr-namespace:JHoney_ImageConverter.Util"
             xmlns:cvt="clr-namespace:JHoney_ImageConverter.Converter"
             Visibility="{Binding Visibility}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Margin="5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />

        </Grid.RowDefinitions>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="KeyDown">
                <i:InvokeCommandAction Command="{Binding ImageConvertViewModelKeyEvent.EventKeyDown}" PassEventArgsToCommand="True" />
            </i:EventTrigger>
            <i:EventTrigger EventName="KeyUp">
                <i:InvokeCommandAction Command="{Binding ImageConvertViewModelKeyEvent.EventKeyUp}" PassEventArgsToCommand="True" />
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <!--이미지정보-->
        <Grid Grid.Column="0" Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Margin="5" HorizontalAlignment="Center">
                <StackPanel  Orientation="Horizontal" Margin="5">
                    <DataGrid x:Name="DataGrid" ItemsSource="{Binding ImageInfoDataGridList}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Loaded">
                                <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=DataGrid, Mode=OneWay}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </DataGrid>
                </StackPanel>
            </GroupBox>

        </Grid>

        <!--옵션탭-->
        <GroupBox Grid.Column="0" Grid.Row="1" Margin="5" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>

                <Grid Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Save Path : " VerticalAlignment="Center" />
                    <TextBox Grid.Column="1" Text="{Binding TxtSaveFilePath}" VerticalAlignment="Center"  />
                    <Button Grid.Column="2" Content="SetPath" VerticalAlignment="Center" Command="{Binding CommandSetSavePath}" />
                </Grid>

                <StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" Orientation="Horizontal" Margin="5">
                    <Button Content="Save Image" Margin="5" Command="{Binding CommandSaveLabelImage}" />
                    <!--<Button Content="Save JSON" Margin="5" IsEnabled="False" />
                    <Button Content="Load Image" Margin="5" IsEnabled="False" />
                    <Button Content="Load JSON" Margin="5" IsEnabled="False" />-->
                </StackPanel>

                <!--Color Button-->
                <customControl:CustomColorButton Grid.Column="0" Grid.Row="3" FillRect="{Binding MainWindowViewModel.SelectedColor, Converter={cvt:ColorToBrushConverter}}"  >
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding Path=CommandSetColor}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </customControl:CustomColorButton>

                <!--Mode Button-->
                <StackPanel Grid.Column="1" Grid.Row="3" Orientation="Horizontal" >
                    <StackPanel.Resources>
                        <Style x:Key="CustomRadioButton" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MahApps.Styles.Button.Circle}" >
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </Style.Triggers>
                            <Setter Property="BorderThickness" Value="2"/>
                        </Style>
                    </StackPanel.Resources>
                    <Controls:NumericUpDown Value="{Binding PenThickness}" Minimum="1" Margin="2" VerticalAlignment="Center" Controls:TextBoxHelper.Watermark="Thickness" Controls:TextBoxHelper.UseFloatingWatermark="True" />
                    <Controls:ToggleSwitch Header="Fill" IsOn="{Binding IsFillOn}" VerticalAlignment="Center" />
                    <Controls:ToggleSwitch Header="AutoClear" IsOn="{Binding IsAutoClearOn}" VerticalAlignment="Center" />
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Select" Margin="2" IsChecked="True">
                        <iconPacks:PackIconFontAwesome Kind="HandPointerRegular" />
                    </RadioButton>
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Pen" Margin="2">
                        <iconPacks:PackIconModern Kind="DrawPencilReflection" />
                    </RadioButton>
                    <!--<RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Eraser" Margin="2">
                        <iconPacks:PackIconBootstrapIcons Kind="Eraser" />
                    </RadioButton>
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Eraser_line" Margin="2">
                        <iconPacks:PackIconRemixIcon Kind="EraserLine" />
                    </RadioButton>-->
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Square" Margin="2">
                        <iconPacks:PackIconMaterialLight Kind="ShapeSquare" />
                    </RadioButton>
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Ellipse" Margin="2">
                        <iconPacks:PackIconUnicons Kind="Circle" />
                    </RadioButton>
                    <RadioButton Style="{StaticResource CustomRadioButton}" BorderBrush="Black" Width="40" Height="40" Command="{Binding CommandSelectEditingMode}" CommandParameter="Polygon" Margin="2">
                        <iconPacks:PackIconBoxIcons Kind="RegularShapePolygon" />
                    </RadioButton>

                </StackPanel>
            </Grid>
        </GroupBox>

        <!--캔버스-->
        <ScrollViewer Grid.Column="0" Grid.Row="2" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">

            <Canvas x:Name="MainCanvas" Background="{Binding ImageShow.ImageBrush}" Width="{Binding Background.ImageSource.Width, ElementName=MainCanvas, Mode=OneWay}" 
                       Height="{Binding Background.ImageSource.Height, ElementName=MainCanvas, Mode=OneWay}" AllowDrop="True" >
                <Canvas.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="{Binding ImageShow.ImageBrushScaleX}" ScaleY="{Binding ImageShow.ImageBrushScaleY}"></ScaleTransform>
                    </TransformGroup>
                </Canvas.LayoutTransform>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=MainCanvas, Mode=OneWay}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseMove}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>

                    <i:EventTrigger EventName="Drop">
                        <i:InvokeCommandAction Command="{Binding Path=CommandDropFile}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseWheel">
                        <i:InvokeCommandAction Command="{Binding Path=CanvasEventMouseWheel}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DockPanel>
                    <Border>
                        <InkCanvas x:Name="InkCanvas" Background="Transparent" Width="{Binding Background.ImageSource.Width, ElementName=MainCanvas}" Height="{Binding Background.ImageSource.Height, ElementName=MainCanvas}" >
                            <InkCanvas.InputBindings>
                                <KeyBinding Key="C" Modifiers="Ctrl" Command="{Binding CopyCommand}" />
                                <KeyBinding Key="V" Modifiers="Ctrl" Command="{Binding PasteCommand}" />
                            </InkCanvas.InputBindings>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding Path=CommandLoaded}" CommandParameter="{Binding ElementName=InkCanvas, Mode=OneWay}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewMouseMove">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventPreviewMouseMove}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewMouseDown">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventPreviewMouseDown}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewMouseUp">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventPreviewMouseUp}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionResizing">
                                    <i:InvokeCommandAction Command="{Binding Path=CanvasEventSelectionResizing}" PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                                
                            </i:Interaction.Triggers>
                        </InkCanvas>
                    </Border>
                </DockPanel>
            </Canvas>
        </ScrollViewer>

        <!--LabelList-->
        <GroupBox Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Width="200" Header="LabelList" Margin="5">
            <ListBox ItemsSource="{Binding Strokes, ElementName=InkCanvas}" />

        </GroupBox>

    </Grid>
</UserControl>
